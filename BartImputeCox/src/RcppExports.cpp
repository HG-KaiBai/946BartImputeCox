// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cCBI
SEXP cCBI(std::vector<double>& T, std::vector<int>& C, std::vector<std::vector<double>>& X, const std::vector<int>& covariate_types, const std::vector<std::vector<int>>& missing_matrix, const std::vector<double>& time, size_t num_iterations, size_t burn_in, std::vector<double>& beta, std::vector<double>& h0, const std::vector<double>& beta_mean, const std::vector<double>& beta_variances, const std::vector<double>& h0_prior_shape, const std::vector<double>& h0_prior_rate, size_t m, int numcut, double alpha, double mybeta, double nu, double lambda, double proposal_stddev_beta, double proposal_stddev_h0, double proposal_stddev_X, size_t missing_covariate_start);
RcppExport SEXP _BartImputeCox_cCBI(SEXP TSEXP, SEXP CSEXP, SEXP XSEXP, SEXP covariate_typesSEXP, SEXP missing_matrixSEXP, SEXP timeSEXP, SEXP num_iterationsSEXP, SEXP burn_inSEXP, SEXP betaSEXP, SEXP h0SEXP, SEXP beta_meanSEXP, SEXP beta_variancesSEXP, SEXP h0_prior_shapeSEXP, SEXP h0_prior_rateSEXP, SEXP mSEXP, SEXP numcutSEXP, SEXP alphaSEXP, SEXP mybetaSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP proposal_stddev_betaSEXP, SEXP proposal_stddev_h0SEXP, SEXP proposal_stddev_XSEXP, SEXP missing_covariate_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type C(CSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type covariate_types(covariate_typesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<int>>& >::type missing_matrix(missing_matrixSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_iterations(num_iterationsSEXP);
    Rcpp::traits::input_parameter< size_t >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type beta_mean(beta_meanSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type beta_variances(beta_variancesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type h0_prior_shape(h0_prior_shapeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type h0_prior_rate(h0_prior_rateSEXP);
    Rcpp::traits::input_parameter< size_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type numcut(numcutSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mybeta(mybetaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type proposal_stddev_beta(proposal_stddev_betaSEXP);
    Rcpp::traits::input_parameter< double >::type proposal_stddev_h0(proposal_stddev_h0SEXP);
    Rcpp::traits::input_parameter< double >::type proposal_stddev_X(proposal_stddev_XSEXP);
    Rcpp::traits::input_parameter< size_t >::type missing_covariate_start(missing_covariate_startSEXP);
    rcpp_result_gen = Rcpp::wrap(cCBI(T, C, X, covariate_types, missing_matrix, time, num_iterations, burn_in, beta, h0, beta_mean, beta_variances, h0_prior_shape, h0_prior_rate, m, numcut, alpha, mybeta, nu, lambda, proposal_stddev_beta, proposal_stddev_h0, proposal_stddev_X, missing_covariate_start));
    return rcpp_result_gen;
END_RCPP
}
// compute_cox_likelihood
double compute_cox_likelihood(const std::vector<double>& T, const std::vector<int>& C, const std::vector<std::vector<double>>& X, const std::vector<double>& beta, const std::vector<double>& h0, const std::vector<double>& time);
RcppExport SEXP _BartImputeCox_compute_cox_likelihood(SEXP TSEXP, SEXP CSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP h0SEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cox_likelihood(T, C, X, beta, h0, time));
    return rcpp_result_gen;
END_RCPP
}
// GammaLikelihood
double GammaLikelihood(double x, double shape, double rate);
RcppExport SEXP _BartImputeCox_GammaLikelihood(SEXP xSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(GammaLikelihood(x, shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// NormalLikelihood
double NormalLikelihood(double x, double mean, double stddev);
RcppExport SEXP _BartImputeCox_NormalLikelihood(SEXP xSEXP, SEXP meanSEXP, SEXP stddevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type stddev(stddevSEXP);
    rcpp_result_gen = Rcpp::wrap(NormalLikelihood(x, mean, stddev));
    return rcpp_result_gen;
END_RCPP
}
// initialize_and_predict
double initialize_and_predict(int type, const std::vector<std::vector<double>>& x_train, const std::vector<double>& H0, const std::vector<double>& y_train, const std::vector<double>& x_test, double H0_test, size_t m, int numcut, double mybeta, double alpha, double tau, double nu, double lambda);
RcppExport SEXP _BartImputeCox_initialize_and_predict(SEXP typeSEXP, SEXP x_trainSEXP, SEXP H0SEXP, SEXP y_trainSEXP, SEXP x_testSEXP, SEXP H0_testSEXP, SEXP mSEXP, SEXP numcutSEXP, SEXP mybetaSEXP, SEXP alphaSEXP, SEXP tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type H0(H0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type y_train(y_trainSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< double >::type H0_test(H0_testSEXP);
    Rcpp::traits::input_parameter< size_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type numcut(numcutSEXP);
    Rcpp::traits::input_parameter< double >::type mybeta(mybetaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_and_predict(type, x_train, H0, y_train, x_test, H0_test, m, numcut, mybeta, alpha, tau, nu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// initialize_update_and_predict
double initialize_update_and_predict(int type, const std::vector<std::vector<double>>& x_train, const std::vector<double>& H0, const std::vector<double>& y_train, const std::vector<double>& x_test, double H0_test, size_t m, int numcut, double mybeta, double alpha, double tau, double nu, double lambda);
RcppExport SEXP _BartImputeCox_initialize_update_and_predict(SEXP typeSEXP, SEXP x_trainSEXP, SEXP H0SEXP, SEXP y_trainSEXP, SEXP x_testSEXP, SEXP H0_testSEXP, SEXP mSEXP, SEXP numcutSEXP, SEXP mybetaSEXP, SEXP alphaSEXP, SEXP tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type H0(H0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type y_train(y_trainSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< double >::type H0_test(H0_testSEXP);
    Rcpp::traits::input_parameter< size_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type numcut(numcutSEXP);
    Rcpp::traits::input_parameter< double >::type mybeta(mybetaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_update_and_predict(type, x_train, H0, y_train, x_test, H0_test, m, numcut, mybeta, alpha, tau, nu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// mh_beta
std::vector<double> mh_beta(const std::vector<double>& current_beta, const std::vector<double>& mean, const std::vector<double>& variances, const std::vector<double>& T, const std::vector<int>& C, const std::vector<std::vector<double>>& X, const std::vector<double>& h0, const std::vector<double>& time, double proposal_stddev);
RcppExport SEXP _BartImputeCox_mh_beta(SEXP current_betaSEXP, SEXP meanSEXP, SEXP variancesSEXP, SEXP TSEXP, SEXP CSEXP, SEXP XSEXP, SEXP h0SEXP, SEXP timeSEXP, SEXP proposal_stddevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type current_beta(current_betaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type variances(variancesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< double >::type proposal_stddev(proposal_stddevSEXP);
    rcpp_result_gen = Rcpp::wrap(mh_beta(current_beta, mean, variances, T, C, X, h0, time, proposal_stddev));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BartImputeCox_cCBI", (DL_FUNC) &_BartImputeCox_cCBI, 24},
    {"_BartImputeCox_compute_cox_likelihood", (DL_FUNC) &_BartImputeCox_compute_cox_likelihood, 6},
    {"_BartImputeCox_GammaLikelihood", (DL_FUNC) &_BartImputeCox_GammaLikelihood, 3},
    {"_BartImputeCox_NormalLikelihood", (DL_FUNC) &_BartImputeCox_NormalLikelihood, 3},
    {"_BartImputeCox_initialize_and_predict", (DL_FUNC) &_BartImputeCox_initialize_and_predict, 13},
    {"_BartImputeCox_initialize_update_and_predict", (DL_FUNC) &_BartImputeCox_initialize_update_and_predict, 13},
    {"_BartImputeCox_mh_beta", (DL_FUNC) &_BartImputeCox_mh_beta, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_BartImputeCox(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
